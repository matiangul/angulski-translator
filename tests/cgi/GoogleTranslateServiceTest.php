<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2013-06-16 at 11:02:38.
 */
class GoogleTranslateServiceTest extends PHPUnit_Framework_TestCase {

    public static $lastRequestTime = null;
    
    public static function waitWithNextRequest() {
        if (self::$lastRequestTime != null) {
            $diff = self::$lastRequestTime->diff(new \DateTime());
            while($diff->s < 4) {
                $diff = self::$lastRequestTime->diff(new \DateTime());
                usleep(500000);
            }
        }
        self::$lastRequestTime = new \DateTime();
    }
	
		public static function lowercase($string) {
			return mb_convert_case($string, MB_CASE_LOWER, "UTF-8");
		}
    
    /**
     * @covers GoogleTranslateService::translate
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage Invalid argument type passed
     * @test
     */
    public function translate_NumberPassed_throwException() {
        GoogleTranslateService::translate(1, 4, 'de');
    }
    
    /**
     * @covers GoogleTranslateService::translate
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage Invalid argument type passed
     * @test
     */
    public function translate_NullPassed_throwException() {
        GoogleTranslateService::translate(null, 'pl', null);
    }
    
    /**
     * @covers GoogleTranslateService::translate
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage Not supported language passed
     * @test
     */
    public function translate_EmptyLanguagePassed_throwException() {
        GoogleTranslateService::translate('Ja', '', '');
    }
    
    /**
     * @covers GoogleTranslateService::translate
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage Not supported language passed
     * @test
     */
    public function translate_NotSupportedLanguage_throwException() {
        GoogleTranslateService::translate('Ja', 'fsdaf', 'pl');
    }
    
    /**
     * @covers GoogleTranslateService::translate
     * @test
     */
    public function translate_emptyString_returnEmptyString() {
        $this->assertEquals('', GoogleTranslateService::translate('', 'pl', 'de'));
    }
    
    /**
     * @covers GoogleTranslateService::translate
     * @test
     */
    public function translate_TextWithSpacesPassed_returnTranslatedString() {
        self::waitWithNextRequest();
				$translations = GoogleTranslateService::translate('Ala ma kota', 'pl', 'de');
			
			$this->assertEquals('ala hat eine katze', self::lowercase($translations[0]));
    }

    /**
     * @covers GoogleTranslateService::translate
     * @test
     */
    public function translate_TextWithPolishDiacritics_returnTranslatedString() {
        self::waitWithNextRequest();
				$translations = GoogleTranslateService::translate('Chrząszcz', 'pl', 'de');
        $this->assertEquals('käfer', self::lowercase($translations[1]));
    }
    
    /**
     * @covers GoogleTranslateService::translate
     * @expectedException \RuntimeException
     * @expectedExceptionMessage The minimum time between API call is 
     * @test
     */
    public function translate_TooSmallTimeBetweenTranslations_throwRuntimeException() {
        self::waitWithNextRequest();
				$translations = GoogleTranslateService::translate('Chrząszcz', 'pl', 'de');
        $this->assertEquals('käfer', self::lowercase($translations[1]));
        GoogleTranslateService::translate('Chrząszcz', 'pl', 'de');
    }
    
    /**
     * @covers GoogleTranslateService::translate
     * @test
     */
    public function translate_TextWithSpacesPassedDEPL_returnTranslatedString() {
        self::waitWithNextRequest();
				$translations = GoogleTranslateService::translate('Ala hat eine Katze', 'de', 'pl');
        $this->assertEquals('ala ma kota', self::lowercase($translations[0]));
    }

    /**
     * @covers GoogleTranslateService::translate
     * @test
     */
    public function translate_TextWithPolishDiacriticsDEPL_returnTranslatedString() {
        self::waitWithNextRequest();
				$translations = GoogleTranslateService::translate('Käfer', 'de', 'pl');
        $this->assertEquals('chrząszcz', self::lowercase($translations[0]));
    }
    
    /**
     * @covers GoogleTranslateService::translate
     * @expectedException \RuntimeException
     * @expectedExceptionMessage The minimum time between API call is 
     * @test
     */
    public function translate_TooSmallTimeBetweenTranslationsDEPL_throwRuntimeException() {
        self::waitWithNextRequest();
				$translations = GoogleTranslateService::translate('Käfer', 'de', 'pl');
        $this->assertEquals('chrząszcz', self::lowercase($translations[0]));
        GoogleTranslateService::translate('Käfer', 'de', 'pl');
    }
}
